#!/bin/sh -x

# prefix
PREFIX=/usr/local/bin
# version
VERSION=0.05
# force os
OSNAME=
# default company/developer name
COMPANY=itsamazing
# default program name
PROG=yadkin
# verbosity
VERBOSE=0
# choose specific versions of JDK, Android, iOS, etc
#VERS_JDK=
#VERS_SDL=
VERS_ANDROID=
VERS_IOS=

TAR=/bin/tar
SED=/bin/sed
AWK=/bin/awk
GZIP=/bin/gzip
UNAME=/bin/uname
JDKSRC_LINUX="OpenJDK17U-jdk_x64_linux_hotspot_17.0.5_8.tar.gz"
JDKSRC_MAC="OpenJDK17U-jdk_x64_mac_hotspot_17.0.5_8.tar.gz"
JDKSRC_WIN="OpenJDK17U-jdk_x64_windows_hotspot_17.0.5_8.zip"

#if test $# -lt 1
#then
#	echo "$0: No args specified."
#	exit 1
#fi 

while [ $# -gt 0 ]
do
	case "$1" in

    # PREFIX for installed software
		-p|--prefix)
			shift
			PREFIX=$1
		;;

    # COMPANY is the organization identifier used for any new apps generated with this tool
		-c|--company)
			shift
			COMPANY=$1
		;;

    # Specify a JDK URL or version
    -j|--jdk)
    ;;

    # Specify the versions of Android you'd like present once this is complete
    -a|--android-builds)
    ;;

    # OS Detection should work, but this would override those rules 
		-o|--operating-system)
			shift
			OSNAME=$1
		;;

    # Print excess lines
		-v|--verbose)
			VERBOSE=1
		;;

    # ...  
		-h|--help)
			cat <<EOF
Usage: $0
-p, --prefix \$DIR             Specify an alternate directory to install
                              utilities.
-c, --company \$NAME           Specify a default identifier for your projects
                              (e.g. org.x.y for Android)
-o, --operating-system \$DIR   Specify an alternate directory to install
                              utilities.
-v, --verbose                 Explain everything   
-h, --help                    Show this help and quit
EOF
		;;
	esac
	shift
done

# Check for awk
printf "checking for awk...   "
if ! test -x "$AWK"
then
  # Try finding it via which
  if test "`which 2>/dev/null || echo $?`" -eq 127
  then
    echo "Dependency 'awk' not found."
    exit 1
  fi

  # Look for it
  AWK="`which awk`"
  if ! test -x "$AWK"
  then
    echo "Dependency 'awk' not found."
    exit 1
  fi 
  printf "Done!\n"
fi


# Check for sed
printf "checking for sed...   "
if ! test -x "$SED"
then
  # Try finding it via which
  if test "`which 2>/dev/null || echo $?`" -eq 127
  then
    echo "Dependency 'sed' not found."
    exit 1
  fi

  # Look for it
  SED="`which sed`"
  if ! test -x "$SED"
  then
    echo "Dependency 'sed' not found."
    exit 1
  fi 
  printf "Done!\n"
fi


# Check for tar
printf "checking for tar...   "
if ! test -x "$TAR"
then
  # Try finding it via which
  if test "`which 2>/dev/null || echo $?`" -eq 127
  then
    echo "Dependency 'tar' not found."
    exit 1
  fi

  # Look for it
  TAR="`which tar`"
  if ! test -x "$TAR"
  then
    echo "Dependency 'tar' not found."
    exit 1
  fi 
  printf "Done!\n"
fi

# Check for gzip (though it's rare that anyone uses this filter with tar) 
#if test "`$GZIP 2>/dev/null || echo $?`" -eq 127
#then
#	echo "gzip not found."
#	exit 1
#fi

# Check for uname
printf "checking for uname...   "
if ! test -x "$UNAME"
then
  # Try finding it via which
  if test "`which 2>/dev/null || echo $?`" -eq 127
  then
    echo "Dependency 'uname' not found."
    exit 1
  fi

  # Look for it
  UNAME="`which uname`"
  if ! test -x "$UNAME"
  then
    echo "Dependency 'uname' not found."
    exit 1
  fi 
  printf "Done!\n"
fi


# Quick, crude OS detection (or use the c/l override)
OSNAME=`$UNAME 2>/dev/null`
#if test -z "$OSNAME"
#then
#	echo "Operating system unspecified"
#	exit 1
#fi



if test $VERBOSE -eq 1
then
	cat <<EOF
Building yadkin with the following configuration:
PREFIX  = $PREFIX
COMPANY = $COMPANY
OSNAME  = $OSNAME
EOF
fi


# Configure other variables
OSOPT=`echo $OSNAME | $AWK '{ print substr(tolower($1),1,1) }'`


if test -z "$OSOPT"
then
	echo Operating System is Unknown 
	exit 1
elif test $OSOPT == 'l'
then
	echo is Linux
	JDKSRC=$JDKSRC_LINUX
	MAKEFILE=Makefile.linux
elif test $OSOPT == 'd'
then
	echo is Mac 
	JDKSRC=$JDKSRC_MAC
	MAKEFILE=Makefile.mac
elif test $OSOPT == 'c'
then
	echo is Cyg 
	JDKSRC=$JDKSRC_LINUX
	MAKEFILE=Makefile.cygwin
else
	echo is Unknown 
	exit 1
fi
exit


# Generate Makefiles
$SED "{
	s#@@PREFIX@@#$PREFIX#g;
	s/@@COMPANY@@/$COMPANY/g;
	s/@@OSNAME@@/$OSNAME/g;
	s/@@JDKSRC@@/$JDKSRC/g;
}" makefiles/$MAKEFILE > Makefile


exit 0
